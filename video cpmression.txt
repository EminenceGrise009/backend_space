const express = require('express');
const router = express.Router();
const multer = require('multer');
const AWS = require('aws-sdk');
const ffmpeg = require('fluent-ffmpeg');

// Configure AWS
AWS.config.update({
  accessKeyId: 'YOUR_ACCESS_KEY',
  secretAccessKey: 'YOUR_SECRET_KEY',
  region: 'us-east-1' // Change to your desired region
});

const s3 = new AWS.S3();

// Set up multer for file uploads
const storage = multer.memoryStorage();
const upload = multer({ storage });

// POST /api/upload
router.post('/upload', upload.single('video'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No video file provided' });
  }

  // Perform video compression using ffmpeg
  const compressedVideoBuffer = compressVideo(req.file.buffer);

  // Upload the original and compressed videos to S3
  const originalVideoParams = {
    Bucket: 'your-bucket-name',
    Key: `uploads/${req.file.originalname}`,
    Body: req.file.buffer
  };

  const compressedVideoParams = {
    Bucket: 'your-bucket-name',
    Key: `compressed/${req.file.originalname}`,
    Body: compressedVideoBuffer
  };

  s3.upload(originalVideoParams, (err, data) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to upload original video' });
    }
    console.log('Original video uploaded:', data.Location);
  });

  s3.upload(compressedVideoParams, (err, data) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to upload compressed video' });
    }
    console.log('Compressed video uploaded:', data.Location);
  });

  res.json({ message: 'Video uploaded and compressed successfully' });
});

function compressVideo(videoBuffer) {
  // Use fluent-ffmpeg to compress the video
  return new Promise((resolve, reject) => {
    ffmpeg()
      .input(videoBuffer)
      .inputOptions(['-threads 4', '-framerate 30'])
      .videoCodec('libx264')
      .audioCodec('aac')
      .toFormat('mp4')
      .on('end', () => {
        console.log('Video compression finished');
        resolve();
      })
      .on('error', (err) => {
        console.error('Video compression error:', err);
        reject(err);
      })
      .pipe();
  });
}

module.exports = router;
